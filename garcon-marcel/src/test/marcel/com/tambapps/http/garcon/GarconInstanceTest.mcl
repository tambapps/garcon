package com.tambapps.http.garcon

import com.tambapps.http.garcon.annotation.*

import com.tambapps.http.hyperpoet.HttpPoet
import com.tambapps.http.hyperpoet.HttpExchange
import com.tambapps.http.hyperpoet.interceptor.ConsolePrintingInterceptor
import com.tambapps.http.hyperpoet.ContentType as PoetContentType
import com.tambapps.http.hyperpoet.ErrorResponseException
import com.tambapps.http.hyperpoet.ErrorResponseHandlers

import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

import static org.junit.jupiter.api.Assertions.assertEquals
import static org.junit.jupiter.api.Assertions.assertThrows
import org.junit.jupiter.api.function.Executable

class GarconInstanceTest {


  private final HttpPoet poet = newPoet()
  private final Garcon garcon = newGarcon()

 @BeforeEach
  fun void init() {
    garcon.start(address: 'localhost', port: 8081)
    Thread.sleep(100L)
  }

  @AfterEach
  fun void dispose() {
    garcon.stop()
  }

 // @Test
  fun void testFoo() {

    assertEquals('Hello World', poet.get('/hello').value)
    assertEquals('Hello World', poet.get('/hello?p=1&a=2').value)
    assertEquals('Hello World', poet.get('/hello/?p=1&a=2').value)

    assertEquals('me', poet.get('/hello2?who=me').value)
    assertEquals('nobody', poet.get('/hello2?who=nobody').value)
  }
 // @Test
  fun void testMirror() {
    assertEquals('magic', poet.post('/mirror', body: 'magic').value)
    //assertEquals('magic', poet.post('/mirror2', body: 'magic').value)
    //assertEquals('magic', poet.post('/mirror3', body: [who: 'magic'], contentType: PoetContentType.JSON).value)
  }

  @Test
  fun void testQueryParams() {
    assertEquals('p 0', poet.get('/qp?p=p').value)
    assertEquals('p 25', poet.get('/qp?p=p&count=25').value)
    assertEquals('Query param p is required', poet.get('/qp').value)
    assertEquals(400, (poet.history.last as HttpExchange).responseCode)
  }

  @Test
  fun void testHeaders() {
    assertEquals('h 0', poet.get('/h', headers: [h: 'h']).value)
    assertEquals('h 25', poet.get('/h', headers: [h: 'h', cOuNt: 25]).value)
    assertEquals('Header H is required', poet.get('/h').value)
    assertEquals(400, (poet.history.last as HttpExchange).responseCode)
  }

  @Test
  fun void testPathVariable() {
    assertEquals('1', poet.get('/user/1').value)
    assertEquals('path variable id is of unexpected type', poet.get('/user/notAnInt').value)
    assertEquals(400, (poet.history.last as HttpExchange).responseCode)
  }

  @Get("/hello")
  fun String getHello() {
      return 'Hello World'
  }

 @Endpoint(method = "GET", path = "/hello2")
  fun Object getHelloWho(HttpExchangeContext context) {
    return context.queryParams['who']
  }

  @Get("/qp")
  fun Object getQueryParam(@QueryParam("p") String p, @QueryParam(name = "count", required = false, defaultValue = "0") Integer count) {
    return "$p $count"
  }

  @Get("/user/{id}")
  fun Object getUser(@PathVariable("id") Integer id) {
    return "$id"
  }

  @Get("/h")
  fun Object getHeader(@RequestHeader("H") String h, @RequestHeader(name = "count", required = false, defaultValue = "0") Integer count) {
    return "$h $count"
  }

  @Post("/mirror")
  fun Object postMirror(HttpRequest request) {
    return new String(request.body)
  }

/*
TODO don't know why when I add some of these methods it doesn't work
  @Post("/mirror2")
  fun void postMirror2(HttpRequest request, HttpResponse response) {
    response.body = request.body
  }

  @Post(path = "/mirror3", accept = 'application/json')
  fun void postMirror3(@ParsedRequestBody Map requestBody, HttpResponse response) {
    response.body = requestBody['who']
  }
  @Post(path = "/objectBody", accept = 'application/json')
  fun void postMirror4(@ParsedRequestBody Foo requestBody, HttpResponse response) {
    response.body = requestBody.bar
  }

  class Foo {
    String bar
  }
  */
  private fun Garcon newGarcon() {
    Garcon garcon = Garcon.fromInstance(this)
    garcon.onServerError = { Exception e -> e.printStackTrace() }
    garcon.onExchangeError = { Exception e -> e.printStackTrace() }
    return garcon
  }

  private fun HttpPoet newPoet() {
    HttpPoet poet = new HttpPoet('http://localhost:8081')
    poet.addInterceptor(new ConsolePrintingInterceptor())
    poet.errorResponseHandler = ErrorResponseHandlers.parseResponseHandler(poet)
    poet.enableHistory(1)
  }

}
package com.tambapps.http.garcon

import com.tambapps.http.garcon.annotation.*

import com.tambapps.http.hyperpoet.HttpPoet
import com.tambapps.http.hyperpoet.HttpExchange
import com.tambapps.http.hyperpoet.interceptor.ConsolePrintingInterceptor
import com.tambapps.http.hyperpoet.ContentType as PoetContentType
import com.tambapps.http.hyperpoet.ErrorResponseException
import com.tambapps.http.hyperpoet.ErrorResponseHandlers


class GarconServer {

  @Get("/hello")
    fun String getHello() {
        return 'Hello World'
    }

   @Endpoint(method = "GET", path = "/hello2")
    fun Object getHelloWho(HttpExchangeContext context) {
      return context.queryParams['who']
    }

    @Get("/qp")
    fun Object getQueryParam(@QueryParam("p") String p, @QueryParam(name = "count", required = false, defaultValue = "0") Integer count) {
      return "$p $count"
    }

    @Get("/user/{id}")
    fun Object getUser(@PathVariable("id") Integer id) {
      return "$id"
    }

    @Get("/h")
    fun Object getHeader(@RequestHeader("H") String h, @RequestHeader(name = "count", required = false, defaultValue = "0") Integer count) {
      return "$h $count"
    }

    @Post("/mirror")
    fun Object postMirror(HttpRequest request) {
      return new String(request.body)
    }


  @Post("/mirror2")
  fun void postMirror2(HttpRequest request, HttpResponse response) {
    response.body = request.body
  }

  @Post(path = "/mirror3", accept = 'application/json')
  fun void postMirror3(@ParsedRequestBody Map requestBody, HttpResponse response) {
    response.body = requestBody['who']
  }

  @Post(path = "/objectBody", accept = 'application/json')
  fun void postMirror4(@ParsedRequestBody dynobj requestBody, HttpResponse response) {
    response.body = requestBody.bar.toString()
  }

  class Foo {
    String bar
  }
}